<?php

if (is_int($a) || is_float($a)) {
	echo $a;
}
var_dump($a);
-----
Block#1
    Expr_FuncCall
        name: LITERAL('is_int')
        args: array
            0: Var#1
        result: Var#2
    Stmt_JumpIf
        cond: Var#2
        if: Block#2
        else: Block#3

Block#2
    Parent: Block#1
    Expr_Assign
        var: Var#3
        expr: LITERAL(true)
        result: Var#4
    Stmt_Jump
        target: Block#4

Block#3
    Parent: Block#1
    Expr_FuncCall
        name: LITERAL('is_float')
        args: array
            0: Var#1
        result: Var#5
    Expr_Cast_Bool
        expr: Var#5
        result: Var#3
    Stmt_Jump
        target: Block#4

Block#4
    Parent: Block#2
    Parent: Block#3
    Phi<Var#6<$a>>: = [Var#1,]
    Stmt_JumpIf
        cond: Var#3
        if: Block#5
        else: Block#6

Block#5
    Parent: Block#4
    Expr_Assertion<(type(LITERAL('int'))|type(LITERAL('float')))>
        expr: Var#6<$a>
        result: Var#7<$a>
    Terminal_Echo
        expr: Var#7<$a>
    Stmt_Jump
        target: Block#7

Block#6
    Parent: Block#4
    Expr_Assertion<not((type(LITERAL('int'))|type(LITERAL('float'))))>
        expr: Var#6<$a>
        result: Var#8<$a>
    Stmt_Jump
        target: Block#7

Block#7
    Parent: Block#5
    Parent: Block#6
    Phi<Var#9<$a>>: = [Var#7<$a>,Var#8<$a>,]
    Expr_FuncCall
        name: LITERAL('var_dump')
        args: array
            0: Var#9<$a>
        result: Var#10